# Schedule definitions for thorn SpaceTimeToy
# $Header:$

STORAGE: spacetimeevolve[3]
STORAGE: icn_state



# Startup

schedule SpaceTimeToy_Startup at STARTUP
{
  LANG: Fortran
} "Register banner"

schedule SpaceTimeToy_InitSymBound at BASEGRID
{
  LANG: Fortran
  OPTIONS: global
} "Schedule symmetries"



# Iterative Crank-Nicholson integration

schedule SpaceTimeToy_EulerStep at EVOL \
	after HydroToy_EulerPredictor
{
  LANG: Fortran
  STORAGE: spacetimetemps hydrotemps
} "Initial Euler step"

schedule SpaceTimeToy_Boundaries at EVOL \
	after SpaceTimeToy_EulerStep
{
  LANG: Fortran
  SYNC: spacetimeevolve
} "Select boundary conditions after initial Euler step"

schedule GROUP ApplyBCs at EVOL \
	after SpaceTimeToy_Boundaries
{
} "Apply boundary conditions after initial Euler step"



schedule GROUP SpaceTimeToy_ICNLoop at EVOL \
	after SpaceTimeToy_EulerStep \
	after HydroToy_EulerPredictor \
	before HydroToy_EulerCorrector \
	while SpaceTimeToy::do_iterate
{
} "All ICN steps"

schedule SpaceTimeToy_ICNStep in SpaceTimeToy_ICNLoop
{
  LANG: Fortran
  STORAGE: spacetimetemps hydrotemps
} "One ICN step"

schedule SpaceTimeToy_Boundaries in SpaceTimeToy_ICNLoop \
	after SpaceTimeToy_ICNStep
{
  LANG: Fortran
  SYNC: spacetimeevolve
} "Select boundary conditions after ICN step"

schedule GROUP ApplyBCs in SpaceTimeToy_ICNLoop \
	after SpaceTimeToy_Boundaries
{
} "Apply boundary conditions after ICN step"



schedule SpaceTimeToy_Boundaries at POSTRESTRICT
{
  LANG: Fortran
  SYNC: spacetimeevolve
} "Select boundary conditions after restricting"

schedule GROUP ApplyBCs at POSTRESTRICT \
	after SpaceTimeToy_Boundaries
{
} "Apply boundary conditions after restricting"
